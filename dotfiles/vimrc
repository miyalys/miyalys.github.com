" All system-wide defaults are set in $VIMRUNTIME/archlinux.vim (usually just
" /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vimrc), since archlinux.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing archlinux.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages.
runtime! archlinux.vim

filetype plugin indent on

" If you prefer the old-style vim functionalty, add 'runtime! vimrc_example.vim'
" Or better yet, read /usr/share/vim/vim73/vimrc_example.vim or the vim manual
" and configure vim to your own liking!

" Vundle

set nocompatible " Turns off strict vi compatibility:

"Don't use the detect file type plugin:
filetype off                   " required!

" Used by nerdcommenter, supposedly it detects what the file type is and changes behaviour accordingly.
" filetype plugin on

set rtp+=/home/lys/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

Bundle 'delimitMate.vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'SirVer/ultisnips'
Bundle 'tpope/vim-surround'
Bundle 'Valloric/MatchTagAlways'
"Bundle 'Syntastic'
"Bundle 'ZenCoding.vim'
" Bundle 'tpope/vim-fugitive'        "Integrates git into vim.
" Consider the Command-T plugin, which navigates files easily.
" Bundle 'wincent/Command-T'

" Vundle: The plugin handler itself, keeps them updated when run manually once in a while.
" DelimitMate: Add things like two quotes immediately when writing one pair of them.
" EasyMotion: Navigate more effectively inside vim, with link-follow-like functionality.
" Syntastic: Check syntax inside vim.
" The-NERD-Commenter: Comment in or out text easily.                                                   filetype plugin indent on           " required!  
" The-NERD-tree: File tree directly inside vim.
" ZenCoding: Various coding shortcuts.
" Surround: Surround text, lines, words, whatever with quotes or tags (typically, at least). " -----------------------------------------------------------
" Ultisnips: Snippets.

" Ultisnips

let g:UltiSnipsListSnippets="<Leader><tab>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" -----------------------------------------------------------

" Match Always
"
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}

" -----------------------------------------------------------


" SETTINGS

if has('gui_running')
  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif

" Set the file encoding to utf8:
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8                     " better default than latin1
  setglobal fileencoding=utf-8           " change default file encoding when writing new files
  "setglobal bomb                        " use a BOM when writing new files
  set fileencodings=ucs-bom,utf-8,latin1 " order to check for encodings when reading files
endif
" Source:
"http://stackoverflow.com/questions/5477565/how-to-setup-vim-properly-for-editing-in-utf-8

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
    \ if line(" '\"") > 0 && line("'\"") <= line("$") |
    \   exe " normal! g`\"" |
    \ endif

syntax on " Enables syntax hilighting:

"set relativenumber " Unfortunately those numbers are too damn visible/noticeable sometimes.
set showmatch
set cursorcolumn " Highlight current column (horizontal position)."
set cursorline " Highlight current line, kind of like a crosshair when combined with the above.

colorscheme molokai " Railcasts, distinguished, zenburn or molokai are good choices.

set nohidden " When I close a tab, remove the buffer

set backspace=indent,eol,start " Makes the BackSpace-button work:

set directory=~/.tmp " Don't clutter my dirs up with swp and tmp files

set mouse=a " Should enforce mouse copying and pasting capabilities:

" Sets the use of the * register rather than the + register (useful for copying and pasting):
" unnamedplus is the standard internal vim buffer, and * is selection. This should sync them.
set clipboard=unnamedplus

" Some search-related features:
" ignorecase makes the search case insensitive.
" smartcase makes a search containing any upper case letters case sensitive.
set ignorecase
set smartcase
set incsearch " Match /searches as typed (saves time)

set smarttab " Delete tabs as one space, use tabs at the start of a line, spaces elsewhere.
set expandtab " Expandtab: Changes inserted tabs to spaces, so noexpandtab should prevent that, I guess? Wonder what's default.

set tabstop=4 " Tabstop: Sets how many spaces a manually inserted tab consists of.
set shiftwidth=4 " Shiftwidth: Sets how many spaces an automatically inserted tab consists of.
set softtabstop=4 " Softtabstop:

set autoindent " Keep a newline at the same level as the current indentation.
set smartindent " smartindent automatically inserts one extra level of indentation in some cases, and works for C-like files.

" An alternative, which is NOT to be used along with smartindent, is file type
" based indentation.

" More info: http://vim.wikia.com/wiki/Indenting_source_code#.27autoindent.27


" Vim has some strange behaviour of autoindenting like crazy when you paste text into it, if autoindent is enabled. This should simplify switching autoindent on and off, which is at least some kind of solution.
" showmode makes vim show what mode you're in, except for normal mode.
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

set wildmenu " Nice menu to navigate through possible completions

" On tab press 1: Complete as much as possible, on 2: show a list of completions, on 3: cycle through all available completions.
set wildmode=longest,list,full



" -----------------------------------------------------------


" MAPPINGS:

" Sets the leader character:
let mapleader = ","

" Disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

map <F1> <Esc> " Because of pesky help. Could be used for something else though?

map <F3> :NERDTreeToggle<Return>
map <F5> :set invnumber<CR>

nnoremap <leader>n :call NumberToggle()<cr>

imap ii <C-[>: " Go directly from insert mode to command mode (:i)

" Easier escape from insert mode, by mapping jj to Esc (needs to be a combination that is never
" used in actual words):
inoremap jj <Esc>l

" Otherwise vim complains when I open some files, even though this is related to pattern matching.
" set maxmempattern=2000

" If you forget to sudo edit something, this can make you sudo inside vim:
cmap w!! %!sudo tee > /dev/null %
" cmap w!! w !sudo dd of=%

" Insert newlines without entering insert modes. j and k makes the cursor stay at
" the line it was at to begin with. S-Enter does not work currently.
nmap <S-Enter> O<Esc>j
nmap <CR> o<Esc>k

" More info: http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode

" Easier saving - insert mode
inoremap hh <Esc>:w<CR>

" Easier saving - normal mode
nmap <leader>w :w<Enter>

" Map Ã¦ to tab previous and Ã¸ to tab next:
nmap Ã¦ gT
nmap Ã¸ gt
" nnoremap <S-Ã¸> :tabnew

" CTRL-N for word completion is too weird. Maybe this is a little bit better?:
imap Â½Â½ <C-n>

" Open Url on this line with the browser \w
map <Leader>w :call Browser ()<CR>

" ,t to open a New tab:
map <Leader>t :tabnew<CR>    
" ,c to close the current tab:
map <Leader>c :tabclose<CR>
" ,q close all tabs if all changes have been saved:
map <Leader>q :qall<CR>
" ,wq write and close all tabs:
map <Leader>wq :wqall<CR>



" Abbreviations:
" Typing cmt is automatically expanded to this:
iabb cmt # Comment - Entered on :r! date-JA by lys
cabb what tabe /home/lys/linux/vim/basics.txt


" FUNCTIONS:

" Used in functions to make the call silent. (ie. no "Hit ENTER to Continue"
command! -nargs=1 Silent
\ | execute ':silent '.<q-args>
\ | execute ':redraw!'

function! Browser ()
   let line = getline (".")
   let line = matchstr (line, "http[^   ]*")
   exec "Silent !firefox ".line
endfunction


" Save and load the currently opened windows and files in the current folder.
nmap <F4> <ESC>:call LoadSession()<CR>

" I started with a project of saving sessions globally somewhere, and
" generating the name on the basis of a hash of the directory, reduced to
" maybe 6 characters. Then it will perform this same hash when trying to load
" the file. If a file is found with that hash, then load it.
" This will also automatically overwrite sessions existing for the current
" directory. If necessary a separate file with the working dir could be
" created, mainly for the purpose of getting an overview of what projects are
" saved in the directory. I'm thinking of using md5.

"let name = 

let s:sessionloaded = 0
function LoadSession()
"  source ~/.vimsessions/Session.vim
  source Session.vim
  let s:sessionloaded = 1
endfunction
function SaveSession()
  if s:sessionloaded == 1
"    mksession! ~/.vimsessions/
    mksession!
  end
endfunction
autocmd VimLeave * call SaveSession()


" Switch between absolute and relative line numbers easily.
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

" For coding C:

map <Leader>ck :call C_compile ()<CR>
map <Leader>cr :call C_compile_run ()<CR>

" Compiles the current program you're inside:
function! C_compile ()
	exec "!gcc -Wall -Werror -pedantic -o x/%:t:r %:t" 
endfunction

" Compiles and runs the current program you're inside:
function! C_compile_run ()
	exec "Silent !gcc -Wall -Werror -pedantic -o x/%:t:r %:t" 
	exec "!x/%:t:r"
endfunction

" Sort CSS properties
nmap <F7> :g#\({\n\)\@<=#.,/}/sort<CR>

" Run python program from inside vim:
autocmd FileType python map <F6> :!python %<CR>




" TESTING GROUNDS
"
function! ClearAllButMatches()
    let old = @c
    let @c=""
    %s//\=setreg('C', submatch(0), 'l')/g
    %d _
    put c
    0d _
    let @c = old
endfunction

map <Leader>f :call ClearAllButMatches ()<CR>


" GRAVEYARD:
