"Vundle:

" Turns off strict vi compatibility:
set nocompatible

"Don't use the detect file type plugin:
filetype off                   " required!

" Used by nerdcommenter, supposedly it detects what the file type is and changes behaviour accordingly.
" filetype plugin on

set rtp+=/home/lys/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'
Bundle 'delimitMate.vim'
Bundle 'EasyMotion'
Bundle 'Syntastic'
Bundle 'The-NERD-Commenter'
Bundle 'The-NERD-tree'
Bundle 'ZenCoding.vim'
Bundle 'vim-surround'
Bundle 'SirVer/ultisnips'
"Bundle 'snipMate'
"Bundle 'snipmate-snippets'

filetype plugin indent on     " required!  


" -----------------------------------------------------------

" Ultisnips

let g:UltiSnipsListSnippets="<Leader><tab>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" -----------------------------------------------------------

if has('gui_running')
  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif

" Enables syntax hilighting:
syntax on

" Sets the colorscheme to Zenburn:
colorscheme zenburn

" When I close a tab, remove the buffer
set nohidden

" Makes the BackSpace-button work:
set backspace=indent,eol,start

" Set the file encoding to utf8:
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8                     " better default than latin1
  setglobal fileencoding=utf-8           " change default file encoding when writing new files
  "setglobal bomb                        " use a BOM when writing new files
  set fileencodings=ucs-bom,utf-8,latin1 " order to check for encodings when reading files
endif
" Source:
"http://stackoverflow.com/questions/5477565/how-to-setup-vim-properly-for-editing-in-utf-8

" Should enforce mouse copying and pasting capabilities:
set mouse=a

" Sets the use of the * register rather than the + register (useful for copying and pasting):
" unnamedplus is the standard internal vim buffer, and * is selection. This should sync them.
set clipboard=unnamedplus

" Some search-related features:
" ignorecase makes the search case insensitive.
" smartcase makes a search containing any upper case letters case sensitive.
set ignorecase
set smartcase

" Match /searches as typed (saves time)
set incsearch

" Tabstop: Sets how many spaces a manually inserted tab consists of.
" Shiftwidth: Sets how many spaces an automatically inserted tab consists of.
" Expandtab: changes inserted tabs to spaces, so noexpandtab should prevent
" that, I guess? Wonder what's default.
" Softtabstop:
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4

" Keep a newline at the same level as the current indentation.
set autoindent
" smartindent' automatically inserts one extra level of indentation in some
" cases, and works for C-like files. 
" An alternative, which is NOT to be used along with smartindent, is file type
" based indentation.
set smartindent

" More info: http://vim.wikia.com/wiki/Indenting_source_code#.27autoindent.27

" Delete tabs as one space, use tabs at the start of a line, spaces
" elsewhere.
set smarttab

" Vim has some strange behaviour of autoindenting like crazy when you paste text into it, if autoindent is enabled. This should simplify switching autoindent on and off, which is at least some kind of solution.
" showmode makes vim show what mode you're in, except for normal mode.
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode


" -----------------------------------------------------------


" MAPPINGS:


" Shortcut for NERDTree
map <F3> :NERDTreeToggle<Return>

" Number nonumber toggle:
map <F5> :set invnumber<CR>

" Otherwise vim complains when I open some files, even though this is related to pattern matching.
" set maxmempattern=2000

" If you forget to sudo edit something, this can make you sudo inside vim:
cmap w!! %!sudo tee > /dev/null %
" cmap w!! w !sudo dd of=%

" Run python program from inside vim:
autocmd FileType python map <F6> :!python %<CR>

" Insert newlines without entering insert modes. j and k makes the cursor stay at
" the line it was at to begin with.
map <S-Enter> O<Esc>j
map <CR> o<Esc>k

" More info: http://vim.wikia.com/wiki/Insert_newline_without_entering_insert_mode

" Sets the leader character:
let mapleader = ","

" Open Url on this line with the browser \w
map <Leader>w :call Browser ()<CR>

" Go directly from insert mode to command mode (:)
imap ii <C-[>:

" Easier escape from insert mode, by mapping jj to Esc (needs to be a combination that is never
" used in actual words):
inoremap jj <Esc>l

" Disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" ,t to open a New tab:
map <Leader>t :tabnew<CR>    
" ,n to cycle through open tabs:
map <Leader>n :tabnext<CR>    
" ,c to close the current tab:
map <Leader>c :tabclose<CR>
" ,q close all tabs if all changes have been saved:
map <Leader>q :qall<CR>
" ,wq write and close all tabs:
map <Leader>wq :wqall<CR>

" Map Ã¦ to tab previous and Ã¸ to tab next:
nmap Ã¦ gT
nmap Ã¸ gt
" nnoremap <S-Ã¸> :tabnew

" CTRL-N for word completion is too weird. Maybe this is a little bit better?:
imap Â½Â½ <C-n>



" Abbreviations:
" Typing cmt is automatically expanded to this:
abb cmt # Comment - Entered on :r! date-JA
cabb what tabe /home/lys/linux/vim.txt



" When editing a file, always jump to the last known cursor position.
"   " Don't do it when the position is invalid or when inside an event handler
"     " (happens when dropping a file on gvim).
autocmd BufReadPost *
    \ if line(" '\"") > 0 && line("'\"") <= line("$") |
    \   exe " normal! g`\"" |
    \ endif

" Nice menu to navigate through possible completions
set wildmenu
" On tab press 1: Complete as much as possible, on 2: show a list of completions, on 3: cycle through all available completions.
set wildmode=longest,list,full

" Sort CSS properties
nnoremap <leader>s ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>





" FUNCTIONS:

" Used in functions to make the call silent. (ie. no "Hit ENTER to Continue"
command! -nargs=1 Silent
\ | execute ':silent '.<q-args>
\ | execute ':redraw!'

function! Browser ()
   let line = getline (".")
   let line = matchstr (line, "http[^   ]*")
   exec "Silent !firefox ".line
endfunction


" Save and load the currently opened windows and files in the current folder.
nmap <F4> <ESC>:call LoadSession()<CR>

let s:sessionloaded = 0
function LoadSession()
  source Session.vim
  let s:sessionloaded = 1
endfunction
function SaveSession()
  if s:sessionloaded == 1
    mksession!
  end
endfunction
autocmd VimLeave * call SaveSession()


" For coding C:

map <Leader>ck :call C_compile ()<CR>
map <Leader>cr :call C_compile_run ()<CR>

" Compiles the current program you're inside:
function! C_compile ()
	exec "!gcc -Wall -Werror -pedantic -o x/%:t:r %:t" 
endfunction

" Compiles and runs the current program you're inside:
function! C_compile_run ()
	exec "Silent !gcc -Wall -Werror -pedantic -o x/%:t:r %:t" 
	exec "!x/%:t:r"
endfunction








" GRAVEYARD:
